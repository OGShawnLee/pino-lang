println("Pino!")
println("This was written in Pino and transpiled to JavaScript!")

var name = "Shawn Lee"
var country = "China" 

println("$name has created this language!")

fn print_budget(name str, budget int) {
  println("$name has a budget of $budget $")
}

print_budget(name, 0)

struct Person {
  name str
  country str
  is_married bool
}

val person = Person {
  name: "Shawn Lee"
  country: "China"
  is_married: false
}

fn print_person(person Person) {
  val message = "$person:name lives in $person:country and"
  if person:is_married {
    println("$message is married!")
  } else {
    println("$person:name lives in $person:country and is married!")
  }
}

fn times(a int, b int) {
  return a * b
} 

fn dollar_to_ruble(dollar int) {
  return times(dollar, 91)
}

fn dollar_to_yen(dollar int) {
  return times(dollar, 151)
}

val dollars = 100
val rubles = dollar_to_ruble(100)
val yens = dollar_to_yen(100)

println("$dollars are $rubles rubles and $yens yens")

if yens > 10000 and true {
  println("That is a lot of yens!")
}

for 3 {
  println("This has run for 3 times!")
}

val amount = 3
for time in amount {
  println("This has run for the $time a total of $times times!")
}

for time in 2 * 2 {
  println("This has run for the $time a total of 4 times!")
}

for name in ["Augustus", "Tiberius", "Caligula"] {
  println("$name was a Roman Emperor!")
}

fn get_str(it int) {
  return "$it: What is going on fella!"
}

var arr_int = []int { len: 6, init: it * 2 }
var arr_str = []str { len: 9, init: get_str(it) }

println(arr_int, arr_str)

struct Weapon {
  name str
  durability int
}

struct Character {
  person Person
  weapon Weapon
}

val character = Character {
  person: person
  weapon: Weapon {
    name: "Sword"
    durability: 100
  }
}

println(character)
println("$character:person:name wields a $character:weapon:name as a weapon!")

struct Game {
  name str
  release_year int
  characters arr
}

println(Game {
  name: "Halo Reach"
  release_year: 2010
  characters: ["Carter", "Kat", "Jun", "Emile", "Jorge", "Noble 6"]
})

val game_a = Game {
  name: "Gears of War"
  release_year: 2005
  characters: ["Marcus", "Dominic", "Cole", "Baird"]
}

val game_b = Game {
  name: "Halo"
  release_year: 2001
  characters: ["Master Chief", "Cortana", "Captain Keyes", "Sergeant Johnson", "343 Guilty Spark"]
}

fn print_game_characters(game Game) {
  println("$game:name Characters $game:characters:length")
  for i in game:characters:length {
    val char = game:characters[i]
    println("  Character $i: $char")
  }
}

print_game_characters(game_a)
print_game_characters(game_b)

val languages = ["Vlang", "Swift"]
val vlang = languages[0]

println("Languages:", languages, vlang)

fn create_characters_from_game(game Game, weapon str) {
  return []Character {
    len: game:characters:length,
    init: Character {
      name: game:characters[it]
      weapon: Weapon {
        name: weapon
        durability: 100
      }
    }
  }
}

val characters = create_characters_from_game(game_a, "Assault Lancer Rifle")
println("$game_a:name", characters)

var random = ["Not an Integer"]
random = [12]

fn get_full_name(name str, last_name str) {
  return "$name $last_name"
}

var full_name = get_full_name("James", "China")

name = get_full_name("Julius", "Ceasar")
name = full_name
country = "Japan"