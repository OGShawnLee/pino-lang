# enum Planet {
#  MERCURY = "Mercury"
#  VENUS = "Venus"
#  EARTH = "Earth"
#  MARS = "Mars"
# }

enum Planet {
  MERCURY, VENUS, EARTH, MARS
  JUPITER, SATURN, URANUS, NEPTUNE
}

struct Phone { name str, brand str, release_date str }
struct Person {
  name str
  budget float
  children int
  country str
  is_married bool
  planet Planet
  phone Phone

  fn get_message {
    if is_married {
      return "#name lives in #country and a budget of #budget dollars and is married!"
    } else {
      return "#name lives in #country and a budget of #budget dollars and is not married"
    }
  }

  fn greet {
    println("Hello, #name")
  }

  fn marry(spouse str) {
    is_married = true
    println("#name is now married to #spouse!")
  }
}

var name = "Shawn Lee" 
var budget = 12.55 # The actual amount is 0 really
var children = 0
var country = "China"
var is_married = false
val planet = Planet::EARTH
var message = "#name lives in #country and has a budget of #budget"
val person = Person {
  name: name
  budget: budget
  children: children
  country: country
  is_married: is_married
  planet: planet
  phone: Phone { name: "Samsung Galaxy A10", brand: "Samsung", release_date: "2019" }
}

if person:budget > 10000 {
  println("Damn, you a G!")
} else if person:budget > 5000 {
  println("Ight, not bad!")
} else if person:budget > 3000 {
  println("Almost decent, common get you shit together!")
} else {
  println("Damn, you a brokie!")
}

person:marry("Lenore")

val jumpscare = fn {
  println("You have been jumpscared!")
}

val print_budget = fn (budget float) {
  println("Your budget is #budget")
}

val call = fn (fun function) {
  fun()
}

call(fn {
  println("What is going on?")
})

fn greet {
  println("Hello, stranger!")
}

fn get_rectangle_area(width float, length float) {
  return width * length
}

fn get_message(
  name str
  country str
  budget float
) {
  return "#name lives in #country and has a budget of #budget"
}

fn get_str(prompt str) {
  return readline(prompt)
}

fn get_float(prompt str) {
  return float(get_str(prompt))
}

get_rectangle_area(10, 20)
val final_message = get_message(
  get_str("What is your name?")
  get_str("What country do you live in?")
  get_float("What is your budget?")
)

println("Message: #final_message")

val pair = [1, 2]
val collection = [
  "Marcus"
  "Dominic"
  "Baird"
  "Cole"
]

for character in collection {
  println("#character is an awesome Gears of War character")
}

for 12 {
  println("This will run 12 times")
}

for {
  println("This is an infinite loop!")
}

val matrix = [
  [1, 2, 3]
  [4, 5, 6]
  [7, 8, 9]
]

println([1.234, 2.345, 3.456])
println(90 + 12 * 12)
println(name:uppercase(), Planet::JUPITER)

val numbers = []int
for number in 30 {
  numbers:push(number)
}

println([]int {
  len: 10
  init: it + 1
})